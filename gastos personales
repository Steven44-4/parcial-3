import tkinter as tk
from tkinter import messagebox
from datetime import datetime
import locale

# Configurar locale para formato COP
try:
    locale.setlocale(locale.LC_ALL, 'es_CO.UTF-8')
except:
    locale.setlocale(locale.LC_ALL, '')

def formatear_cop(valor):
    try:
        return locale.currency(valor, grouping=True)
    except:
        return f"${valor:,.2f}".replace(",", "#").replace(".", ",").replace("#", ".")

class AppGastos:
    def __init__(self):
        self.movimientos = []
        self.nombre_usuario = ""
        self.ventana_inicio = None
        self.ventana_principal = None
        self.entrada_nombre = None
        self.entrada_descripcion = None
        self.entrada_monto = None
        self.tipo_var = None
        self.lista = None
        self.etiqueta_total = None
        self.mostrar_menu_inicio()

    def mostrar_menu_inicio(self):
        self.ventana_inicio = tk.Tk()
        self.ventana_inicio.title("Inicio - App de Gastos")
        self.ventana_inicio.geometry("300x200")
        self.ventana_inicio.resizable(False, False)

        tk.Label(self.ventana_inicio, text="Â¡Bienvenido!", font=("Arial", 14)).pack(pady=10)
        tk.Label(self.ventana_inicio, text="Ingresa tu nombre:").pack()
        self.entrada_nombre = tk.Entry(self.ventana_inicio, width=30)
        self.entrada_nombre.pack(pady=5)

        tk.Button(self.ventana_inicio, text="Iniciar", command=self.iniciar_app).pack(pady=20)
        self.ventana_inicio.mainloop()

    def iniciar_app(self):
        nombre = self.entrada_nombre.get().strip()
        if not nombre:
            messagebox.showwarning("Nombre requerido", "Por favor ingresa tu nombre.")
            return

        self.nombre_usuario = nombre
        self.ventana_inicio.destroy()
        self.crear_ventana_principal()

    def crear_ventana_principal(self):
        self.ventana_principal = tk.Tk()
        self.ventana_principal.title(f"ðŸ’° App de Gastos - Bienvenido, {self.nombre_usuario}")
        self.ventana_principal.geometry("400x580")
        self.ventana_principal.resizable(False, False)

        tk.Label(self.ventana_principal, text="DescripciÃ³n:").pack()
        self.entrada_descripcion = tk.Entry(self.ventana_principal, width=40)
        self.entrada_descripcion.pack()

        tk.Label(self.ventana_principal, text="Monto:").pack()
        self.entrada_monto = tk.Entry(self.ventana_principal, width=20)
        self.entrada_monto.pack()

        self.tipo_var = tk.StringVar(value="Gasto")
        tk.Radiobutton(self.ventana_principal, text="Gasto", variable=self.tipo_var, value="Gasto").pack()
        tk.Radiobutton(self.ventana_principal, text="Ingreso", variable=self.tipo_var, value="Ingreso").pack()

        tk.Button(self.ventana_principal, text="Agregar movimiento", command=self.agregar_movimiento).pack(pady=10)

        tk.Label(self.ventana_principal, text="Historial:").pack()
        self.lista = tk.Listbox(self.ventana_principal, width=50)
        self.lista.pack(pady=5)

        tk.Button(self.ventana_principal, text="Eliminar seleccionado", command=self.eliminar_movimiento).pack(pady=5)

        self.etiqueta_total = tk.Label(self.ventana_principal, text="Balance total: $0.00", font=("Arial", 12, "bold"))
        self.etiqueta_total.pack(pady=10)

        tk.Button(self.ventana_principal, text="Finalizar y ver balance", bg="lightgreen", command=self.mostrar_resumen).pack(pady=10)
        tk.Button(self.ventana_principal, text="Cerrar sesiÃ³n / Volver al inicio", fg="red", command=self.volver_al_inicio).pack(pady=10)

        self.ventana_principal.mainloop()

    def agregar_movimiento(self):
        tipo = self.tipo_var.get()
        descripcion = self.entrada_descripcion.get()
        monto = self.entrada_monto.get()

        if not descripcion or not monto:
            messagebox.showwarning("Campos vacÃ­os", "Completa todos los campos.")
            return

        try:
            monto = float(monto)
        except ValueError:
            messagebox.showerror("Error", "El monto debe ser un nÃºmero.")
            return

        if tipo == "Gasto":
            monto = -abs(monto)

        fecha = datetime.now().strftime("%d/%m/%Y")
        self.movimientos.append((fecha, descripcion, monto))
        self.actualizar_lista()
        self.limpiar_campos()

    def eliminar_movimiento(self):
        seleccion = self.lista.curselection()
        if not seleccion:
            messagebox.showwarning("Selecciona un movimiento", "Debes seleccionar un elemento de la lista para eliminarlo.")
            return

        indice = seleccion[0]
        del self.movimientos[indice]
        self.actualizar_lista()

    def actualizar_lista(self):
        self.lista.delete(0, tk.END)
        total = 0
        for fecha, desc, monto in self.movimientos:
            self.lista.insert(tk.END, f"{fecha} - {desc}: {formatear_cop(monto)}")
            total += monto
        self.etiqueta_total.config(text=f"Balance total: {formatear_cop(total)}")

    def limpiar_campos(self):
        self.entrada_descripcion.delete(0, tk.END)
        self.entrada_monto.delete(0, tk.END)
        self.tipo_var.set("Gasto")

    def mostrar_resumen(self):
        self.ventana_principal.destroy()
        total_final = sum(m[2] for m in self.movimientos)

        resumen = tk.Tk()
        resumen.title("Resumen final")
        resumen.geometry("300x200")
        resumen.resizable(False, False)

        tk.Label(resumen, text=f"Resumen de {self.nombre_usuario}", font=("Arial", 14, "bold")).pack(pady=10)
        tk.Label(resumen, text=f"Balance final: {formatear_cop(total_final)}", font=("Arial", 12)).pack(pady=10)

        tk.Button(resumen, text="Volver al inicio", command=lambda: [resumen.destroy(), self.volver_al_inicio()]).pack(pady=5)
        tk.Button(resumen, text="Salir", command=resumen.quit).pack(pady=5)

        resumen.mainloop()

    def volver_al_inicio(self):
        if self.ventana_principal:
            self.ventana_principal.destroy()
        self.movimientos.clear()
        self.mostrar_menu_inicio()


if __name__ == "__main__":
    AppGastos()
