import tkinter as tk
from tkinter import messagebox
from datetime import datetime
import locale

# Configurar locale para formato COP
try:
    locale.setlocale(locale.LC_ALL, 'es_CO.UTF-8')
except:
    locale.setlocale(locale.LC_ALL, '')

# Lista para guardar los movimientos
movimientos = []
nombre_usuario = ""  # Global para acceder desde otras ventanas

def formatear_cop(valor):
    try:
        return locale.currency(valor, grouping=True)
    except:
        return f"${valor:,.2f}".replace(",", "#").replace(".", ",").replace("#", ".")

def agregar_movimiento():
    tipo = tipo_var.get()
    descripcion = entrada_descripcion.get()
    monto = entrada_monto.get()

    if not descripcion or not monto:
        messagebox.showwarning("Campos vacÃ­os", "Completa todos los campos.")
        return

    try:
        monto = float(monto)
    except ValueError:
        messagebox.showerror("Error", "El monto debe ser un nÃºmero.")
        return

    if tipo == "Gasto":
        monto = -abs(monto)

    fecha = datetime.now().strftime("%d/%m/%Y")
    movimientos.append((fecha, descripcion, monto))

    actualizar_lista()
    limpiar_campos()

def eliminar_movimiento():
    seleccion = lista.curselection()
    if not seleccion:
        messagebox.showwarning("Selecciona un movimiento", "Debes seleccionar un elemento de la lista para eliminarlo.")
        return

    indice = seleccion[0]
    del movimientos[indice]
    actualizar_lista()

def actualizar_lista():
    lista.delete(0, tk.END)
    total = 0
    for mov in movimientos:
        fecha, desc, monto = mov
        lista.insert(tk.END, f"{fecha} - {desc}: {formatear_cop(monto)}")
        total += monto
    etiqueta_total.config(text=f"Balance total: {formatear_cop(total)}")

def limpiar_campos():
    entrada_descripcion.delete(0, tk.END)
    entrada_monto.delete(0, tk.END)
    tipo_var.set("Gasto")

def iniciar_app():
    global nombre_usuario
    nombre = entrada_nombre.get().strip()
    if not nombre:
        messagebox.showwarning("Nombre requerido", "Por favor ingresa tu nombre.")
        return

    nombre_usuario = nombre
    ventana_inicio.destroy()
    crear_ventana_principal()

def volver_al_inicio():
    ventana.destroy()
    movimientos.clear()
    mostrar_menu_inicio()

def mostrar_resumen():
    ventana.destroy()

    total_final = sum(m[2] for m in movimientos)
    resumen = tk.Tk()
    resumen.title("Resumen final")
    resumen.geometry("300x200")
    resumen.resizable(False, False)

    tk.Label(resumen, text=f"Resumen de {nombre_usuario}", font=("Arial", 14, "bold")).pack(pady=10)
    tk.Label(resumen, text=f"Balance final: {formatear_cop(total_final)}", font=("Arial", 12)).pack(pady=10)

    tk.Button(resumen, text="Volver al inicio", command=lambda:[resumen.destroy(), movimientos.clear(), mostrar_menu_inicio()]).pack(pady=5)
    tk.Button(resumen, text="Salir", command=resumen.quit).pack(pady=5)

    resumen.mainloop()

def crear_ventana_principal():
    global ventana, entrada_descripcion, entrada_monto, tipo_var, lista, etiqueta_total

    ventana = tk.Tk()
    ventana.title(f"ðŸ’° App de Gastos - Bienvenido, {nombre_usuario}")
    ventana.geometry("400x580")
    ventana.resizable(False, False)

    tk.Label(ventana, text="DescripciÃ³n:").pack()
    entrada_descripcion = tk.Entry(ventana, width=40)
    entrada_descripcion.pack()

    tk.Label(ventana, text="Monto:").pack()
    entrada_monto = tk.Entry(ventana, width=20)
    entrada_monto.pack()

    tipo_var = tk.StringVar(value="Gasto")
    tk.Radiobutton(ventana, text="Gasto", variable=tipo_var, value="Gasto").pack()
    tk.Radiobutton(ventana, text="Ingreso", variable=tipo_var, value="Ingreso").pack()

    tk.Button(ventana, text="Agregar movimiento", command=agregar_movimiento).pack(pady=10)

    tk.Label(ventana, text="Historial:").pack()
    lista = tk.Listbox(ventana, width=50)
    lista.pack(pady=5)

    tk.Button(ventana, text="Eliminar seleccionado", command=eliminar_movimiento).pack(pady=5)

    etiqueta_total = tk.Label(ventana, text="Balance total: $0.00", font=("Arial", 12, "bold"))
    etiqueta_total.pack(pady=10)

    tk.Button(ventana, text="Finalizar y ver balance", bg="lightgreen", command=mostrar_resumen).pack(pady=10)

    tk.Button(ventana, text="Cerrar sesiÃ³n / Volver al inicio", fg="red", command=volver_al_inicio).pack(pady=10)

    ventana.mainloop()

def mostrar_menu_inicio():
    global ventana_inicio, entrada_nombre

    ventana_inicio = tk.Tk()
    ventana_inicio.title("Inicio - App de Gastos")
    ventana_inicio.geometry("300x200")
    ventana_inicio.resizable(False, False)

    tk.Label(ventana_inicio, text="Â¡Bienvenido!", font=("Arial", 14)).pack(pady=10)
    tk.Label(ventana_inicio, text="Ingresa tu nombre:").pack()
    entrada_nombre = tk.Entry(ventana_inicio, width=30)
    entrada_nombre.pack(pady=5)

    tk.Button(ventana_inicio, text="Iniciar", command=iniciar_app).pack(pady=20)

    ventana_inicio.mainloop()

# Iniciar la app
mostrar_menu_inicio()
